{"version":3,"sources":["lib/services/apollo.ts","lib/services/theme.ts","modules/Todo/components/TodoList/TodoList.tsx","modules/Todo/Todo.styles.ts","modules/Todo/Todo.tsx","index.tsx","modules/Todo/store/queries.ts","globalTypes.ts","modules/Todo/store/initialState.ts","modules/Todo/store/index.ts","modules/Todo/store/resolvers.ts","modules/Todo/store/typeDefs.ts"],"names":["cache","InMemoryCache","dataIdFromObject","object","id","client","ApolloClient","resolvers","todoResolvers","typeDefs","todoTypeDefs","writeData","data","todoInitialState","theme","createMuiTheme","toggleState","state","TaskState","DONE","IDLE","IN_PROGRESS","TodoList","taskState","useMutation","REMOVE_TODO","mutationRemove","EDIT_TODO","mutationEdit","useQuery","TODOS_BY_STATE","variables","List","todosByState","map","text","ListItem","button","dense","key","onClick","refetchQueries","query","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","Delete","useStyles","makeStyles","icon","marginRight","spacing","addButton","bottom","position","right","todos","margin","maxWidth","getTaskStateFromTabIdx","tabIdx","Todo","ADD_TODO","mutationAdd","classes","useState","tab","setTab","open","setOpen","task","setTask","AppBar","Toolbar","PlaylistAdd","className","fontSize","Typography","variant","Paper","Tabs","value","onChange","_","newValue","indicatorColor","textColor","Tab","label","Fab","color","Add","Dialog","aria-labelledby","fullWidth","DialogTitle","DialogContent","TextField","autoFocus","e","target","type","DialogActions","Button","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","TODO_FRAGMENT","gql","TODO_EDIT_FRAGMENT","TODOS","initialState","__typename","counter","length","Mutation","addTodo","prev","readQuery","todo","toString","writeQuery","removeTodo","idx","findIndex","undefined","splice","editTodo","readFragment","fragment","writeFragment","Query","filter","x"],"mappings":"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","file":"static/js/main.2f56301b.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport {\n  resolvers as todoResolvers,\n  typeDefs as todoTypeDefs,\n  initialState as todoInitialState,\n} from '../../modules/Todo/store'\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: (object) => object.id,\n})\nconst client = new ApolloClient({\n  cache,\n  resolvers: [todoResolvers],\n  typeDefs: [todoTypeDefs],\n})\n\ncache.writeData({\n  data: {\n    ...todoInitialState,\n  },\n})\n\nexport { client }\n","import { createMuiTheme } from '@material-ui/core'\n\nexport const theme = createMuiTheme()\n","import React, { FC } from 'react'\nimport { useMutation, useQuery } from '@apollo/react-hooks'\nimport {\n  Checkbox,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\n\nimport {\n  TODOS_BY_STATE,\n  todosByStateQuery,\n  todosByStateQueryVariables,\n  REMOVE_TODO,\n  removeTodoMutation,\n  removeTodoMutationVariables,\n  EDIT_TODO,\n  editTodoMutation,\n  editTodoMutationVariables,\n} from '../../store/queries'\nimport { TaskState } from '../../../../globalTypes'\n\nconst toggleState = (state: TaskState): TaskState => {\n  switch (state) {\n    case TaskState.DONE:\n      return TaskState.IDLE\n    case TaskState.IDLE:\n      return TaskState.DONE\n    default:\n      return TaskState.IN_PROGRESS\n  }\n}\n\ntype TOuterProps = {\n  taskState?: TaskState\n}\n\nexport const TodoList: FC<TOuterProps> = ({ taskState }) => {\n  const [mutationRemove] = useMutation<removeTodoMutation, removeTodoMutationVariables>(REMOVE_TODO)\n  const [mutationEdit] = useMutation<editTodoMutation, editTodoMutationVariables>(EDIT_TODO)\n  const { data } = useQuery<todosByStateQuery, todosByStateQueryVariables>(TODOS_BY_STATE, {\n    variables: { state: taskState },\n  })\n\n  return (\n    <List>\n      {data?.todosByState.map(({ id, state, text }) => {\n        return (\n          <ListItem\n            button\n            dense\n            key={id}\n            onClick={() =>\n              mutationEdit({\n                variables: { id, state: toggleState(state), text: text },\n                refetchQueries: [{ query: TODOS_BY_STATE, variables: { state: taskState } }],\n              })\n            }\n          >\n            <ListItemIcon>\n              <Checkbox\n                edge=\"start\"\n                checked={state === TaskState.DONE}\n                tabIndex={-1}\n                disableRipple\n                inputProps={{ 'aria-labelledby': id }}\n              />\n            </ListItemIcon>\n            <ListItemText id={id} primary={text} />\n            <ListItemSecondaryAction>\n              <IconButton aria-label=\"comments\" edge=\"end\" onClick={() => mutationRemove({ variables: { id } })}>\n                <Delete />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\n\nexport const useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(1),\n  },\n\n  addButton: {\n    bottom: theme.spacing(2),\n    position: 'fixed',\n    right: theme.spacing(2),\n  },\n\n  todos: {\n    margin: `${theme.spacing(4)}px auto ${theme.spacing(10)}px`,\n    maxWidth: 500,\n  },\n}))\n","import React, { ChangeEventHandler, FC, MouseEventHandler, useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport {\n  AppBar,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  Paper,\n  Tab,\n  Tabs,\n  TextField,\n  Toolbar,\n  Typography,\n} from '@material-ui/core'\nimport { Add, PlaylistAdd } from '@material-ui/icons'\n\nimport { TodoList } from './components/TodoList'\nimport { ADD_TODO, addTodoMutation, addTodoMutationVariables } from './store/queries'\nimport { useStyles } from './Todo.styles'\nimport { TaskState } from '../../globalTypes'\n\ntype tabChangeEventHandler = (event: React.ChangeEvent<{}>, value: any) => void\n\nconst getTaskStateFromTabIdx = (tabIdx: number): TaskState | undefined => {\n  switch (tabIdx) {\n    case 1:\n      return TaskState.IDLE\n    case 2:\n      return TaskState.DONE\n    default:\n      return undefined\n  }\n}\n\nexport const Todo: FC = () => {\n  const [mutationAdd] = useMutation<addTodoMutation, addTodoMutationVariables>(ADD_TODO)\n  const classes = useStyles()\n  const [tab, setTab] = useState(0)\n  const [open, setOpen] = useState(false)\n  const [task, setTask] = useState('')\n  const onAddClick = () => {\n    setOpen(true)\n  }\n  const onCancelClick: MouseEventHandler = () => {\n    setOpen(false)\n    setTask('')\n  }\n  const onCreateClick: MouseEventHandler = () => {\n    mutationAdd({ variables: { text: task } })\n    setOpen(false)\n    setTask('')\n  }\n  const onInputChange: ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = (e) => {\n    setTask(e.target.value)\n  }\n\n  const handleChange: tabChangeEventHandler = (_, newValue) => {\n    setTab(newValue)\n  }\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <PlaylistAdd className={classes.icon} fontSize=\"large\" />\n          <Typography variant=\"h6\">Tasks</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Paper className={classes.todos}>\n        <Tabs\n          value={tab}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"todo list\"\n        >\n          <Tab label=\"All\" />\n          <Tab label=\"Pending\" />\n          <Tab label=\"Done\" />\n        </Tabs>\n        <TodoList taskState={getTaskStateFromTabIdx(tab)} />\n      </Paper>\n\n      <Fab className={classes.addButton} color=\"primary\" onClick={onAddClick} variant=\"round\">\n        <Add />\n      </Fab>\n\n      <Dialog aria-labelledby=\"form-dialog-title\" fullWidth maxWidth=\"sm\" open={open}>\n        <DialogTitle id=\"form-dialog-title\">Create Task</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            fullWidth\n            label=\"Task\"\n            margin=\"dense\"\n            onChange={onInputChange}\n            type=\"text\"\n            value={task}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onCancelClick} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={onCreateClick} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { CssBaseline, ThemeProvider } from '@material-ui/core'\n\nimport { client } from './lib/services/apollo'\nimport { theme } from './lib/services/theme'\nimport { Todo } from './modules/Todo'\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Todo />\n    </ThemeProvider>\n  </ApolloProvider>,\n  document.getElementById('root'),\n)\n","import gql from 'graphql-tag'\n\nexport * from './src/todoFragment'\nexport * from './src/todoEditFragment'\nexport * from './src/todosQuery'\nexport * from './src/todosByStateQuery'\nexport * from './src/addTodoMutation'\nexport * from './src/removeTodoMutation'\nexport * from './src/editTodoMutation'\n\nexport const TODO_FRAGMENT = gql`\n  fragment todoFragment on Todo {\n    id\n    text\n    state\n  }\n`\n\nexport const TODO_EDIT_FRAGMENT = gql`\n  fragment todoEditFragment on Todo {\n    text\n    state\n  }\n`\n\nexport const TODOS = gql`\n  ${TODO_FRAGMENT}\n  query todosQuery {\n    todos @client {\n      ...todoFragment\n    }\n  }\n`\n\nexport const TODOS_BY_STATE = gql`\n  ${TODO_FRAGMENT}\n  query todosByStateQuery($state: TaskState) {\n    todosByState(state: $state) @client {\n      ...todoFragment\n    }\n  }\n`\n\nexport const ADD_TODO = gql`\n  ${TODO_FRAGMENT}\n  mutation addTodoMutation($text: String!) {\n    addTodo(text: $text) @client {\n      ...todoFragment\n    }\n  }\n`\n\nexport const REMOVE_TODO = gql`\n  mutation removeTodoMutation($id: String!) {\n    removeTodo(id: $id) @client\n  }\n`\n\nexport const EDIT_TODO = gql`\n  mutation editTodoMutation($id: String!, $text: String, $state: TaskState) {\n    editTodo(id: $id, text: $text, state: $state) @client\n  }\n`\n","/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\nexport enum TaskState {\n  DONE = \"DONE\",\n  IDLE = \"IDLE\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n","import { TaskState } from '../../../globalTypes'\n\nexport const initialState = {\n  todos: [\n    {\n      __typename: 'Todo',\n      id: '1',\n      text: 'Create boilerplate',\n      state: TaskState.IDLE,\n    },\n    {\n      __typename: 'Todo',\n      id: '2',\n      text: '???',\n      state: TaskState.DONE,\n    },\n    {\n      __typename: 'Todo',\n      id: '3',\n      text: 'Profit',\n      state: TaskState.IDLE,\n    },\n  ],\n}\n","export * from './resolvers'\nexport * from './typeDefs'\nexport * from './initialState'\nexport * from './queries'\n","import { initialState } from './initialState'\nimport { TODOS, todosQuery, todoFragment, TODO_EDIT_FRAGMENT } from './queries'\nimport { TAppResolvers } from '../../../lib/types/gql'\nimport { TaskState } from '../../../globalTypes'\n\nlet counter = initialState.todos.length\n\nexport const resolvers: TAppResolvers = {\n  Mutation: {\n    addTodo: (_, { text }, { cache }) => {\n      const prev = cache.readQuery<todosQuery>({ query: TODOS })\n      const todo = { __typename: 'Todo', id: (++counter).toString(), text, state: TaskState.IDLE }\n      const todos = [...(prev?.todos || []), todo]\n      const data = { todos }\n\n      cache.writeQuery({ query: TODOS, data })\n\n      return todo\n    },\n    removeTodo: (_, { id }: { id: string }, { cache }) => {\n      const prev = cache.readQuery<todosQuery>({ query: TODOS })\n      if (!prev) return\n\n      const idx = prev.todos.findIndex((todo) => todo.id === id)\n\n      if (!prev || idx === undefined || idx === -1) return false\n\n      prev.todos.splice(idx, 1)\n      cache.writeQuery({ query: TODOS, data: { todos: prev.todos } })\n\n      return true\n    },\n    editTodo: (_, { id, text, state }: { id: string; text: string; state: TaskState }, { cache }) => {\n      const todo = cache.readFragment<todoFragment>({ fragment: TODO_EDIT_FRAGMENT, id })\n      const data = { ...todo, text, state }\n\n      cache.writeFragment({ fragment: TODO_EDIT_FRAGMENT, id, data })\n\n      return true\n    },\n  },\n\n  Query: {\n    todosByState: (_, { state }: { state: TaskState }, { cache }) => {\n      const data = cache.readQuery<todosQuery>({ query: TODOS })\n\n      if (!data || !data.todos) return []\n\n      const todos = [...data.todos]\n\n      if (!state) return todos\n      return todos.filter((x) => x.state === state)\n    },\n  },\n}\n","import gql from 'graphql-tag'\n\nexport const typeDefs = gql`\n  enum TaskState {\n    IDLE\n    IN_PROGRESS\n    DONE\n  }\n\n  type Todo {\n    id: String!\n    text: String!\n    state: TaskState!\n  }\n\n  extend type Query {\n    todos: [Todo!]!\n    todosByState(state: TaskState): [Todo!]!\n  }\n\n  extend type Mutation {\n    addTodo(text: String!): Todo\n    editTodo(id: String!, text: String, state: TaskState): Boolean\n    removeTodo(id: String!): Boolean\n  }\n`\n"],"sourceRoot":""}