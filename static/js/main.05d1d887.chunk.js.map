{"version":3,"sources":["lib/services/apollo.ts","lib/services/theme.ts","modules/Todo/Todo.styles.ts","modules/Todo/Todo.tsx","index.tsx","modules/Todo/store/queries.ts","modules/Todo/store/initialState.ts","modules/Todo/store/index.ts","modules/Todo/store/resolvers.ts","modules/Todo/store/typeDefs.ts"],"names":["cache","InMemoryCache","dataIdFromObject","object","id","client","ApolloClient","resolvers","todoResolvers","typeDefs","todoTypeDefs","writeData","data","todoInitialState","theme","createMuiTheme","useStyles","makeStyles","icon","marginRight","spacing","addButton","bottom","position","right","todos","margin","maxWidth","Todo","useMutation","ADD_TODO","mutationAdd","REMOVE_TODO","mutationRemove","TOGGLE_TODO","mutationToggle","useQuery","TODOS","classes","useState","open","setOpen","task","setTask","animate","opacity","initial","exit","AppBar","Toolbar","PlaylistAdd","className","fontSize","Typography","variant","Paper","List","map","done","text","ListItem","button","component","motion","div","dense","key","onClick","variables","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","Delete","Fab","color","Add","Dialog","aria-labelledby","fullWidth","DialogTitle","DialogContent","TextField","autoFocus","label","onChange","e","target","value","type","DialogActions","Button","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","TODO_FRAGMENT","gql","TODO_DONE_FRAGMENT","initialState","__typename","counter","length","Mutation","addTodo","_","prev","readQuery","query","todo","toString","writeQuery","removeTodo","idx","findIndex","undefined","newTodos","splice","toggleTodo","writeFragment","fragment","Query"],"mappings":"sRASMA,EAAQ,IAAIC,IAAc,CAC9BC,iBAAkB,SAACC,GAAD,OAAYA,EAAOC,MAEjCC,EAAS,IAAIC,IAAa,CAC9BN,QACAO,UAAW,CAACC,aACZC,SAAU,CAACC,cAGbV,EAAMW,UAAU,CACdC,KAAK,eACAC,kB,YClBMC,EAAQC,c,6NCARC,EAAYC,aAAW,SAACH,GAAD,MAAY,CAC9CI,KAAM,CACJC,YAAaL,EAAMM,QAAQ,IAG7BC,UAAW,CACTC,OAAQR,EAAMM,QAAQ,GACtBG,SAAU,QACVC,MAAOV,EAAMM,QAAQ,IAGvBK,MAAO,CACLC,OAAO,GAAD,OAAKZ,EAAMM,QAAQ,GAAnB,mBAAgCN,EAAMM,QAAQ,IAA9C,MACNO,SAAU,S,QCyBDC,EAAW,WAAO,IAAD,EACNC,YAAuDC,YAAtEC,EADqB,sBAEHF,YAA6DG,eAA/EC,EAFqB,sBAGHJ,YAA6DK,eAA/EC,EAHqB,oBAIpBvB,EAASwB,YAAqBC,SAA9BzB,KACF0B,EAAUtB,IALY,EAMJuB,oBAAS,GANL,mBAMrBC,EANqB,KAMfC,EANe,OAOJF,mBAAS,IAPL,mBAOrBG,EAPqB,KAOfC,EAPe,KAwBtBC,EAAU,CAAEC,QAAS,GACrBC,EAAU,CAAED,QAAS,GACrBE,EAAO,CAAEF,QAAS,GAExB,OACE,oCACE,kBAACG,EAAA,EAAD,CAAQzB,SAAS,UACf,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,UAAWb,EAAQpB,KAAMkC,SAAS,UAC/C,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAIJ,kBAACC,EAAA,EAAD,CAAOJ,UAAWb,EAAQb,OACxB,kBAAC+B,EAAA,EAAD,KACE,kBAAC,IAAD,YACG5C,QADH,IACGA,OADH,EACGA,EAAMa,MAAMgC,KAAI,YAAyB,IAAtBrD,EAAqB,EAArBA,GAAIsD,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC5B,OACE,kBAACC,EAAA,EAAD,CACEhB,QAASA,EACTiB,QAAM,EACNC,UAAWC,IAAOC,IAClBC,OAAK,EACLlB,KAAMA,EACND,QAASA,EACToB,IAAK9D,EACL+D,QAAS,kBAAMhC,EAAe,CAAEiC,UAAW,CAAEhE,KAAIsD,MAAOA,OAExD,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,QAASd,EACTe,UAAW,EACXC,eAAa,EACbC,WAAY,CAAE,kBAAmBvE,MAGrC,kBAACwE,EAAA,EAAD,CAAcxE,GAAIA,EAAIyE,QAASlB,IAC/B,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,aAAW,WAAWT,KAAK,MAAMJ,QAAS,kBAAMlC,EAAe,CAAEmC,UAAW,CAAEhE,UACxF,kBAAC6E,EAAA,EAAD,eAUhB,kBAACC,EAAA,EAAD,CAAK/B,UAAWb,EAAQjB,UAAW8D,MAAM,UAAUhB,QAlEpC,WACjB1B,GAAQ,IAiEkEa,QAAQ,SAC9E,kBAAC8B,EAAA,EAAD,OAGF,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,oBAAoBC,WAAS,EAAC5D,SAAS,KAAKa,KAAMA,GACxE,kBAACgD,EAAA,EAAD,CAAapF,GAAG,qBAAhB,eACA,kBAACqF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTJ,WAAS,EACTK,MAAM,OACNlE,OAAO,QACPmE,SAlEwE,SAACC,GACjFnD,EAAQmD,EAAEC,OAAOC,QAkETC,KAAK,OACLD,MAAOtD,KAGX,kBAACwD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQhC,QAjFyB,WACvC1B,GAAQ,GACRE,EAAQ,KA+E8BwC,MAAM,WAAtC,UAGA,kBAACgB,EAAA,EAAD,CAAQhC,QAhFyB,WACvCpC,EAAY,CAAEqC,UAAW,CAAET,KAAMjB,KACjCD,GAAQ,GACRE,EAAQ,KA6E8BwC,MAAM,WAAtC,cC9HViB,IAASC,OACP,kBAAC,IAAD,CAAgBhG,OAAQA,GACtB,kBAACiG,EAAA,EAAD,CAAexF,MAAOA,GACpB,kBAACyF,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,U,wvCCPnB,IAAMC,EAAgBC,IAAH,KAQbC,EAAqBD,IAAH,KAMlBtE,EAAQsE,IAAH,IACdD,GAQS5E,EAAW6E,IAAH,IACjBD,GAQS1E,EAAc2E,IAAH,KAMXzE,EAAcyE,IAAH,M,gCC/CxB,kCAAO,IAAME,EAAe,CAC1BpF,MAAO,CACL,CACEqF,WAAY,OACZ1G,GAAI,IACJuD,KAAM,qBACND,MAAM,GAER,CACEoD,WAAY,OACZ1G,GAAI,IACJuD,KAAM,MACND,MAAM,GAER,CACEoD,WAAY,OACZ1G,GAAI,IACJuD,KAAM,SACND,MAAM,M,gCClBZ,iL,sFCIIqD,E,MAAUF,EAAapF,MAAMuF,OAEpBzG,EAA2B,CACtC0G,SAAU,CACRC,QAAS,SAACC,EAAD,KAA6B,IAAvBxD,EAAsB,EAAtBA,KAAU3D,EAAY,EAAZA,MACjBoH,EAAOpH,EAAMqH,UAAsB,CAAEC,MAAOjF,UAC5CkF,EAAO,CAAET,WAAY,OAAQ1G,MAAO2G,GAASS,WAAY7D,OAAMD,MAAM,GAErE9C,EAAO,CAAEa,MADJ,uBAAY,OAAJ2F,QAAI,IAAJA,OAAA,EAAAA,EAAM3F,QAAS,IAAvB,CAA4B8F,KAKvC,OAFAvH,EAAMyH,WAAW,CAAEH,MAAOjF,QAAOzB,SAE1B2G,GAETG,WAAY,SAACP,EAAD,KAA2C,IAArC/G,EAAoC,EAApCA,GAAwBJ,EAAY,EAAZA,MAClCoH,EAAOpH,EAAMqH,UAAsB,CAAEC,MAAOjF,UAClD,GAAK+E,EAAL,CAEA,IAAMO,EAAMP,EAAK3F,MAAMmG,WAAU,SAACL,GAAD,OAAUA,EAAKnH,KAAOA,KAEvD,IAAKgH,QAAgBS,IAARF,IAA8B,IAATA,EAAY,OAAO,EAErD,IAAMG,EAAQ,YAAOV,EAAK3F,OAK1B,OAHAqG,EAASC,OAAOJ,EAAK,GACrB3H,EAAMyH,WAAW,CAAEH,MAAOjF,QAAOzB,KAAM,CAAEa,MAAOqG,MAEzC,IAETE,WAAY,SAACb,EAAD,KAAgE,IAA1D/G,EAAyD,EAAzDA,GAAIsD,EAAqD,EAArDA,KAUpB,OAVyE,EAAZ1D,MACvDiI,cAAgC,CACpCC,SAAUtB,qBACVxG,GAAIA,EACJQ,KAAM,CACJkG,WAAY,OACZpD,WAIG,IAIXyE,MAAO,K,gmBC7CF,IAAM1H,E,MAAWkG,GAAH,O","file":"static/js/main.05d1d887.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport {\n  resolvers as todoResolvers,\n  typeDefs as todoTypeDefs,\n  initialState as todoInitialState,\n} from '../../modules/Todo/store'\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: (object) => object.id,\n})\nconst client = new ApolloClient({\n  cache,\n  resolvers: [todoResolvers],\n  typeDefs: [todoTypeDefs],\n})\n\ncache.writeData({\n  data: {\n    ...todoInitialState,\n  },\n})\n\nexport { client }\n","import { createMuiTheme } from '@material-ui/core'\n\nexport const theme = createMuiTheme()\n","import { makeStyles } from '@material-ui/core/styles'\n\nexport const useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(1),\n  },\n\n  addButton: {\n    bottom: theme.spacing(2),\n    position: 'fixed',\n    right: theme.spacing(2),\n  },\n\n  todos: {\n    margin: `${theme.spacing(4)}px auto ${theme.spacing(10)}px`,\n    maxWidth: 500,\n  },\n}))\n","import React, { ChangeEventHandler, FC, MouseEventHandler, useState } from 'react'\nimport { useMutation, useQuery } from '@apollo/react-hooks'\nimport {\n  AppBar,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Paper,\n  TextField,\n  Toolbar,\n  Typography,\n} from '@material-ui/core'\nimport { Add, Delete, PlaylistAdd } from '@material-ui/icons'\nimport { motion, AnimatePresence } from 'framer-motion'\n\nimport { useStyles } from './Todo.styles'\nimport {\n  TODOS,\n  todosQuery,\n  ADD_TODO,\n  addTodoMutation,\n  addTodoMutationVariables,\n  REMOVE_TODO,\n  removeTodoMutation,\n  removeTodoMutationVariables,\n  TOGGLE_TODO,\n  toggleTodoMutation,\n  toggleTodoMutationVariables,\n} from './store/queries'\n\nexport const Todo: FC = () => {\n  const [mutationAdd] = useMutation<addTodoMutation, addTodoMutationVariables>(ADD_TODO)\n  const [mutationRemove] = useMutation<removeTodoMutation, removeTodoMutationVariables>(REMOVE_TODO)\n  const [mutationToggle] = useMutation<toggleTodoMutation, toggleTodoMutationVariables>(TOGGLE_TODO)\n  const { data } = useQuery<todosQuery>(TODOS)\n  const classes = useStyles()\n  const [open, setOpen] = useState(false)\n  const [task, setTask] = useState('')\n  const onAddClick = () => {\n    setOpen(true)\n  }\n  const onCancelClick: MouseEventHandler = () => {\n    setOpen(false)\n    setTask('')\n  }\n  const onCreateClick: MouseEventHandler = () => {\n    mutationAdd({ variables: { text: task } })\n    setOpen(false)\n    setTask('')\n  }\n  const onInputChange: ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> = (e) => {\n    setTask(e.target.value)\n  }\n\n  const animate = { opacity: 1 }\n  const initial = { opacity: 0 }\n  const exit = { opacity: 0 }\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <PlaylistAdd className={classes.icon} fontSize=\"large\" />\n          <Typography variant=\"h6\">Tasks</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Paper className={classes.todos}>\n        <List>\n          <AnimatePresence>\n            {data?.todos.map(({ id, done, text }) => {\n              return (\n                <ListItem\n                  animate={animate}\n                  button\n                  component={motion.div}\n                  dense\n                  exit={exit}\n                  initial={initial}\n                  key={id}\n                  onClick={() => mutationToggle({ variables: { id, done: !done } })}\n                >\n                  <ListItemIcon>\n                    <Checkbox\n                      edge=\"start\"\n                      checked={done}\n                      tabIndex={-1}\n                      disableRipple\n                      inputProps={{ 'aria-labelledby': id }}\n                    />\n                  </ListItemIcon>\n                  <ListItemText id={id} primary={text} />\n                  <ListItemSecondaryAction>\n                    <IconButton aria-label=\"comments\" edge=\"end\" onClick={() => mutationRemove({ variables: { id } })}>\n                      <Delete />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              )\n            })}\n          </AnimatePresence>\n        </List>\n      </Paper>\n\n      <Fab className={classes.addButton} color=\"primary\" onClick={onAddClick} variant=\"round\">\n        <Add />\n      </Fab>\n\n      <Dialog aria-labelledby=\"form-dialog-title\" fullWidth maxWidth=\"sm\" open={open}>\n        <DialogTitle id=\"form-dialog-title\">Create Task</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            fullWidth\n            label=\"Task\"\n            margin=\"dense\"\n            onChange={onInputChange}\n            type=\"text\"\n            value={task}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onCancelClick} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={onCreateClick} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { CssBaseline, ThemeProvider } from '@material-ui/core'\n\nimport { client } from './lib/services/apollo'\nimport { theme } from './lib/services/theme'\nimport { Todo } from './modules/Todo'\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Todo />\n    </ThemeProvider>\n  </ApolloProvider>,\n  document.getElementById('root'),\n)\n","import gql from 'graphql-tag'\n\nexport * from './src/todoFragment'\nexport * from './src/todoDoneFragment'\nexport * from './src/todosQuery'\nexport * from './src/addTodoMutation'\nexport * from './src/removeTodoMutation'\nexport * from './src/toggleTodoMutation'\n\nexport const TODO_FRAGMENT = gql`\n  fragment todoFragment on Todo {\n    id\n    text\n    done\n  }\n`\n\nexport const TODO_DONE_FRAGMENT = gql`\n  fragment todoDoneFragment on Todo {\n    done\n  }\n`\n\nexport const TODOS = gql`\n  ${TODO_FRAGMENT}\n  query todosQuery {\n    todos @client {\n      ...todoFragment\n    }\n  }\n`\n\nexport const ADD_TODO = gql`\n  ${TODO_FRAGMENT}\n  mutation addTodoMutation($text: String!) {\n    addTodo(text: $text) @client {\n      ...todoFragment\n    }\n  }\n`\n\nexport const REMOVE_TODO = gql`\n  mutation removeTodoMutation($id: String!) {\n    removeTodo(id: $id) @client\n  }\n`\n\nexport const TOGGLE_TODO = gql`\n  mutation toggleTodoMutation($id: String!, $done: Boolean!) {\n    toggleTodo(id: $id, done: $done) @client\n  }\n`\n","export const initialState = {\n  todos: [\n    {\n      __typename: 'Todo',\n      id: '1',\n      text: 'Create boilerplate',\n      done: false,\n    },\n    {\n      __typename: 'Todo',\n      id: '2',\n      text: '???',\n      done: true,\n    },\n    {\n      __typename: 'Todo',\n      id: '3',\n      text: 'Profit',\n      done: false,\n    },\n  ],\n}\n","export * from './resolvers'\nexport * from './typeDefs'\nexport * from './initialState'\nexport * from './queries'\n","import { TAppResolvers } from '../../../lib/types/gql'\nimport { TODOS, todosQuery, TODO_DONE_FRAGMENT, todoDoneFragment } from './queries'\nimport { initialState } from './initialState'\n\nlet counter = initialState.todos.length\n\nexport const resolvers: TAppResolvers = {\n  Mutation: {\n    addTodo: (_, { text }, { cache }) => {\n      const prev = cache.readQuery<todosQuery>({ query: TODOS })\n      const todo = { __typename: 'Todo', id: (++counter).toString(), text, done: false }\n      const todos = [...(prev?.todos || []), todo]\n      const data = { todos }\n\n      cache.writeQuery({ query: TODOS, data })\n\n      return todo\n    },\n    removeTodo: (_, { id }: { id: string }, { cache }) => {\n      const prev = cache.readQuery<todosQuery>({ query: TODOS })\n      if (!prev) return\n\n      const idx = prev.todos.findIndex((todo) => todo.id === id)\n\n      if (!prev || idx === undefined || idx === -1) return false\n\n      const newTodos = [...prev.todos]\n\n      newTodos.splice(idx, 1)\n      cache.writeQuery({ query: TODOS, data: { todos: newTodos } })\n\n      return true\n    },\n    toggleTodo: (_, { id, done }: { id: string; done: boolean }, { cache }) => {\n      cache.writeFragment<todoDoneFragment>({\n        fragment: TODO_DONE_FRAGMENT,\n        id: id,\n        data: {\n          __typename: 'Todo',\n          done,\n        },\n      })\n\n      return true\n    },\n  },\n\n  Query: {},\n}\n","import gql from 'graphql-tag'\n\nexport const typeDefs = gql`\n  type Todo {\n    id: String!\n    text: String!\n    done: Boolean!\n  }\n\n  extend type Query {\n    todos: [Todo!]!\n  }\n\n  extend type Mutation {\n    addTodo(text: String!): Todo\n    editTodo(id: String!, text: String!): Boolean\n    removeTodo(id: String!): Boolean\n    toggleTodo(id: String!, done: Boolean!): Boolean\n  }\n`\n"],"sourceRoot":""}